/*
MIT License

Copyright (c) 2024 DosWorld

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#ifndef _XMS_H_
#define _XMS_H_

#define XMS_API_CHECK    0x4300
#define XMS_GET_API_ADDR 0x4310
#define XMS_API_MALLOC   0x09
#define XMS_API_FREE     0x0A
#define XMS_API_COPY     0x0B
#define XMS_API_SCOPY    0xCB

dword xmsApiEntry = 0;

struct StructXmsRec {
        dword len;
        word  src_hnd;
        dword src_ofs;
        word  dst_hnd;
        dword dst_ofs;
        byte  src_high;
        byte  dst_high;
} xmsRec = { 0 };

void XMS_CLEAR_REC() {
        $PUSH DI, CX, AX, ES, CS;
        $POP ES;
        DI = #xmsRec;
        CX = sizeof(xmsRec);
        AL = 0;
        $CLD;
        $REP; $STOSB;
        $POP ES, AX, CX, DI;
}

:inline void XMS(AH) { $CALL FAR CSDWORD[#xmsApiEntry]; }

char IS_XMS() {
        AX = XMS_API_CHECK;
        $INT 0x2F;
        IF(AL == 0x80) {
                AX = XMS_GET_API_ADDR;
                $INT 0x2F;
                DSWORD[#xmsApiEntry] = BX;
                DSWORD[#xmsApiEntry+2] = ES;
                AL = TRUE;
        } ELSE AL = FALSE;
        RETURN AL;
}
// DX = size in kB
:inline word XMS_MALLOC(DX) { @XMS(XMS_API_MALLOC); IF(AX == 1) AX = DX; ELSE AX = 0;}
// DX = handle
:inline void XMS_FREE(DX) { @XMS(XMS_API_FREE); }

char pascal xmsCopy(word lenl, word lenh, word srcHnd, word srcl, word srch, word dstHnd, word dstl, word dsth) {
        XMS_CLEAR_REC();
        $PUSH DS, SI, CX;
        $PUSH CS;
        $POP DS;
        SI = #xmsRec;
        DSWORD[#SI.StructXmsRec.len] = lenl;
        DSWORD[#SI.StructXmsRec.len + 2] = lenh;
        DSWORD[#SI.StructXmsRec.src_hnd] = srcHnd;
        DSWORD[#SI.StructXmsRec.src_ofs] = srcl;
        DSWORD[#SI.StructXmsRec.src_ofs + 2] = srch;
        DSWORD[#SI.StructXmsRec.dst_hnd] = dstHnd;
        DSWORD[#SI.StructXmsRec.dst_ofs] = dstl;
        DSWORD[#SI.StructXmsRec.dst_ofs + 2] = dsth;

        @XMS(XMS_API_COPY);
        $POP CX, SI, DS;
}

#endif

