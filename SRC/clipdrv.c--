/*
MIT License

Copyright (c) 2024 DosWorld

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#resize FALSE
#parsecommandline FALSE

#include "clip.h--"
#include "xms.h--"

#define CB_VER       0x0001
#define CB_ERROR     0x0000

#define INT_CBD      0x2F
#define INT_PSCREEN  0x05

dword oldCbInt = 0;
dword oldPsInt = 0;

word xmsHndl = 0;

word cbDataSize = 0;
word cbDataType = CF_TEXT;
byte cbLastByte = 0;

word bufSeg = 0;
word bufOfs = 0;

word scrSeg = 0xB800;
word scrW = 0;
word scrH = 0;
word scrSize = 0;

interrupt NEW_CB_INT() {
        $PUSHF;
        $PUSH BX;
        $PUSH DS, CS;
        $POP DS;
        bufOfs = BX;
        bufSeg = ES;
        if(AX == CB_API_GETVER) {
                AX = CB_VER;
        } else if(AX == CB_API_OPEN) {
                AX = TRUE;
        } else if(AX == CB_API_CLEAR) {
                cbDataSize = 0;
                cbDataType = CF_TEXT;
                AX = TRUE;
        } else if(AX == CB_API_SET) {
                IF(SI == 0) {
                        $PUSH BX, CX, DX, SI, DI;
                        cbDataType = DX;
                        cbDataSize = CX;
                        $PUSH CX;
                        AX = CX;
                        AX = AX >> 1;
                        AX = AX << 1;
                        CX = AX;
                        IF(AX != 0) xmsCopy(CX, 0,  0, bufOfs, bufSeg,  xmsHndl, 0, 0);
                        $POP AX;
                        BX = AX + bufOfs - 1;
                        IF(AX & 1 != 0) {
                                AX = bufSeg; ES = AX;
                                AL = ESBYTE[BX];
                                cbLastByte = AL;
                        }
                        $POP DI, SI, DX, CX, BX;
                        AX = TRUE;
                } ELSE AX = CB_ERROR;
        } else if(AX == CB_API_GETSIZE) {
                DX = 0;
                AX = cbDataSize;
        } else if(AX == CB_API_GET) {
                AX = cbDataSize;
                $PUSH AX;
                AX = AX >> 1;
                AX = AX << 1;
                CX = AX;
                IF(AX != 0) xmsCopy(CX, 0,  xmsHndl, 0, 0,  0, bufOfs, bufSeg);
                $POP AX;
                BX = AX + bufOfs - 1;
                IF(AX & 1 != 0) {
                        AX = bufSeg; ES = AX;
                        AL = cbLastByte;
                        ESBYTE[BX] = AL;
                }
                DX = cbDataType;
                AX = TRUE;
        } else if(AX == CB_API_CLOSE) {
                AX = TRUE;
        } else if(AX == CB_API_COMPACT) {
                DX = AX = 0;
        } else if(AX == CB_API_GETCAPS) {
                AX = CB_ERROR;
        } else {
                $POP DS, BX;
                $POPF;
                $JMP FAR CSDWORD[#oldCbInt];
        }
        $POP DS, BX;
        $POPF;
}

char CHECK_VMODE() {
        AH = 0x0F; $INT 0x10;
        IF(AL == 0) {
                AX = TRUE;
        } ELSE IF(AL == 1) {
                AX = TRUE;
        } ELSE IF(AL == 2) {
                AX = TRUE;
        } ELSE IF(AL == 3) {
                AX = TRUE;
        } ELSE IF(AL == 7) {
                AX = TRUE;
        } ELSE IF(AL == 8) {
                AX = TRUE;
        } ELSE AX = FALSE;
        RETURN AX;
}

void GET_SCEEN_SIZE() {
        $PUSH DS;
        AX = 0; DS = AX;
        AL = DSBYTE[0x0484]; // height
        BX = DSWORD[0x044A]; // width
        $POP DS;
        AH = 0;
        scrH = AX;
        scrW = BX;
        AX = AX * BX * 2;
        scrSize = AX;
}

void COPY_SCREEN() {
        $PUSH DS;
        SI = DI = 0;
        DX = scrW;
        CX = scrH;
        CX++;
        AX = scrSeg; DS = AX; ES = AX;
        $CLD;
        WHILE(CX != 0) {
                $PUSH CX, DX;
                BX = DI;
                WHILE (DX != 0) {
                        $LODSW;
                        $STOSB;
                        DX--;
                }
        
                DI--;
                WHILE(BX != DI) {
                        IF(DSBYTE[DI] != 0x20) { DI++; BREAK;}
                        DI--;
                }
                AX = 0x0A0D;
                $STOSW;
                $POP DX, CX;
                CX--;
        }
        CX = DI;
        DX = CF_TEXT;
        SI = BX = 0;
        AX = CB_API_SET;
        $INT 0x2F;
        $POP DS;
}

interrupt NEW_PS_INT() {
        $PUSHF;
        $PUSH ES, DS, BP, SI, DI, DX, CX, BX, AX;
        $PUSH CS, CS;
        $POP DS, ES;
        IF(CHECK_VMODE()) {
                GET_SCEEN_SIZE();
                // Save screen
                xmsCopy(scrSize, 0,  0, 0, scrSeg,  xmsHndl, 0, 1);
                COPY_SCREEN();
                // Restore screen
                xmsCopy(scrSize, 0,  xmsHndl, 0, 1,  0, 0, scrSeg);
        } ELSE {
                $PUSHF;
                $CALL FAR DSDWORD[#oldPsInt];
        }
        $POP AX, BX, CX, DX, DI, SI, BP, DS, ES;
        $POPF;
}

char endTsr = 0;

:void AMSG(DX) { AH = 9; $INT 0x21; }
:char IS_MONO() { $PUSH DS; AX = 0; DS = AX; AL = DSBYTE[0x465]; $POP  DS; AL &= 4; }
:inline void FREE_MEM(AX) { ES = AX; AH = 0x49; $INT 0x21; }
:inline void TSR(DX) { $INT 0x27; }

void INSTALL() {
        AX = XMS_MALLOC(128);
        IF(AX == 0) {
                AMSG("\nERROR: Colud not allocate 128kB XMS-memory\n$");
        } ELSE xmsHndl = AX;

        IF(IS_MONO()){
                scrSeg = 0xB000;
        }

        GETINTVECT(#oldCbInt, INT_CBD);
        SETINTVECT( , INT_CBD, CS, #NEW_CB_INT);

        GETINTVECT(#oldPsInt, INT_PSCREEN);
        SETINTVECT( , INT_PSCREEN, CS, #NEW_PS_INT);

        @FREE_MEM(CSWORD[0x2C]);
        @TSR(#endTsr);
}

void main() {
        $PUSH CS, CS;
        $POP DS, ES;

        AMSG("Clipboard driver. RELEASE-20241115, (c) 2024 DosWorld, MIT License\n$");
        IF(CB_DETECT()) {
                AMSG("\nERROR: Clipboard driver already present\n$");
        } ELSE IF(!IS_XMS()) {
                AMSG("\nERROR: XMS-memory driver is required\n$");
        } ELSE INSTALL();
        AX = 0x4C01; $INT 0x21;
}

